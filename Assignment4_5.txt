1	Write a shell script which will generate the O/P as follows

*
**
***
****

#!/bin/bash
for i in {1..4}
do
  for j in $(seq 1 $i)
  do
     echo -n "*"
  done
  echo ""
done


2	Accept the first name, middle name, and last name of a person in variables fname, mname and lname respectively. Greet the person (take his full name) using appropriate message. 

#!/bin/bash
read -p "Enter First Name: " fname
read -p "Enter Middle Name: " mname
read -p "Enter Last Name: " lname
echo "Hello, $fname $mname $lname! Welcome!"

OUTPUT

[root@hostname01 ~]# ./program2.sh
Enter First Name: sumedh
Enter Middle Name: sadanand
Enter Last Name: kulkarni
Hello, sumedh sadanand kulkarni! Welcome!



3	Display the name of files in the current directory along with the names of files with maximum & minimum size. The file size is considered in bytes.

#!/bin/bash
ls -lS | awk '{print $9, $5}'| tail -n +2
largest=$(ls -S | head -1)
smallest=$(ls -S | tail -1)
echo "Largest File is: $largest"
echo "smallest File is: $smallest"

OUTPUT

[root@hostname01 ~]# ./program3.sh
Isdoc 8310
users 257
program3.sh 178
friends 157
newfriend 157
program2.sh 157
program1.sh 110
errorlog.txt 41
Desktop 6
Documents 6
Downloads 6
Music 6
Pictures 6
Public 6
Templates 6
Videos 6
Largest File is: Isdoc
smallest File is: Videos



4	Write a script which when executed checks out whether it is a working day or not?
(Note: Working day Mon-Fri)

#!/bin/bash
day=$(date +%u)

if [ "$day" -ge 1 ] && [ "$day" -le 5 ]; then
  echo "Today is a working day."
else
  echo "Today is not a working day."
fi

OUTPUT

[root@hostname01 ~]# ./program4.sh
Today is a working day.

5	Write a script that accepts a member into HP health club, if the weight of the person is withing the range of 30-250 Kgs.

#!/bin/bash
echo "Enter weight (in kg):"
read weight

if [ "$weight" -ge 30 ] && [ "$weight" -le 250 ]; then
  echo "Welcome to HP Health Club!"
else
  echo "Weight out of acceptable range!"
fi


OUTPUT

[root@hostname01 ~]# ./program5.sh
Enter weight (in kg):
80
Welcome to HP Health Club!


6	Write a shell script that greets the user with an appropriate message depending on the system time.

#!/bin/bash
hour=$(date +%H)

if [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ]; then
  echo "Good Morning!"
elif [ "$hour" -ge 12 ] && [ "$hour" -lt 17 ]; then
  echo "Good Afternoon!"
elif [ "$hour" -ge 17 ] && [ "$hour" -lt 21 ]; then
  echo "Good Evening!"
else
  echo "Good Night!"
fi

OUTPUT

[root@hostname01 ~]# ./program6.sh
Good Afternoon!


7	A data file file has some student records including rollno, names and subject marks. The fields are separated by a “:”. Write a shell script that accepts roll number from the user, searches it in the file and if the roll number is present - allows the user to modify name and marks in 3 subjects. 
If the roll number is not present, display a message “Roll No Not Found”. Allow the user to modify one record at a time. 

#!/bin/bash
file = "data.txt"
echo "Enter Roll Number:"
read rollno

record=$(grep "^$rollno:" file)

if [ -n "$record" ]; then
  echo "Record found: $record"
  echo "Enter new Name:"
  read name
  echo "Enter new Marks in Subject 1:"
  read marks1
  echo "Enter new Marks in Subject 2:"
  read marks2
  echo "Enter new Marks in Subject 3:"
  read marks3

  if [[ "$marks1" -lt 0 || "$marks1" -gt 100 || "$marks2" -lt 0 || "$marks2" -gt 100 || "$marks3" -lt 0 || "$marks3" -gt 100 ]]; then
    echo "Marks must be between 0 and 100."
    exit 1
  fi

  sed -i "s/^$rollno:.*/$rollno:$name:$marks1:$marks2:$marks3/" file
  echo "Record updated successfully."
else
  echo "Roll No Not Found."
fi


8	Modify program 7 to accept the RollNo from the command line.

#!/bin/bash

file = "data.txt"
if [ $# -ne 1 ]; then
  echo "Usage: $0 <rollno>"
  exit 1
fi

rollno=$1
record=$(grep "^$rollno:" file)

if [ -n "$record" ]; then
  echo "Record found: $record"
  
  echo "Enter new Name:"
  read name
  echo "Enter new Marks in Subject 1:"
  read marks1
  echo "Enter new Marks in Subject 2:"
  read marks2
  echo "Enter new Marks in Subject 3:"
  read marks3
  
  if [[ "$marks1" -lt 0 || "$marks1" -gt 100 || "$marks2" -lt 0 || "$marks2" -gt 100 || "$marks3" -lt 0 || "$marks3" -gt 100 ]]; then
    echo "Marks must be between 0 and 100."
    exit 1
  fi

  sed -i "s/^$rollno:.*/$rollno:$name:$marks1:$marks2:$marks3/" file
  echo "Record updated successfully."
else
  echo "Roll No Not Found."
fi


9	Modify the program 7 to accept the RollNo and display the record and ask for delete confirmation. Once confirmed delete the record and update the data file.

#!/bin/bash
file = "data.txt"

if [ $# -ne 1 ]; then
  echo "Usage: $0 <rollno>"
  exit 1
fi

rollno=$1

# Check if the record exists in the file
record=$(grep "^$rollno:" file)

if [ -n "$record" ]; then
  echo "Record found: $record"
  echo "Do you want to delete this record? (yes/no)"
  read response

  if [[ "$response" =~ ^[Yy][Ee][Ss]$ ]]; then
    sed -i "/^$rollno:/d" file
    echo "Record deleted successfully."
  else
    echo "Deletion canceled."
  fi
else
  echo "Roll No Not Found."
fi


10	Write a script that takes a command line argument and reports on its file type (regular file, directory file, etc.). For more than one argument generate error message.  

#!/bin/bash
if [ $# -eq 1 ]; then
  file=$1
  if [ -f "$file" ]; then
    echo "$file is a regular file."
  elif [ -d "$file" ]; then
    echo "$file is a directory."
  else
    echo "$file is another type of file."
  fi
else
  echo "Error: Please provide exactly one file as an argument."
fi


11	Add some student records in the “student” file manually. The fields to be considered are “RollNo”, “Name”, “Marks_Hindi”, “Marks_Maths”, “Marks_Physics”.
 Write a script which does the following 
a	If the roll number already exists, then store the record and the following message 
“roll number exists” in a log file “log1”.
b	If the marks in the subjects is not in the range of 1 – 99 then store such a record followed by a message “marks out of range” in “log1”
c	If the data is valid, the calculate total, percentage, grade and display on the terminal


#!/bin/bash
logfile="log1"
echo "Enter Roll No:"
read rollno

if grep -q "^$rollno:" student; then
  echo "Roll number exists." >> $logfile
  exit
fi

echo "Enter Name:"
read name
echo "Enter Marks in Hindi:"
read marks_hindi
echo "Enter Marks in Maths:"
read marks_maths
echo "Enter Marks in Physics:"
read marks_physics

if [ "$marks_hindi" -lt 1 ] || [ "$marks_hindi" -gt 99 ] || [ "$marks_maths" -lt 1 ] || [ "$marks_maths" -gt 99 ] || [ "$marks_physics" -lt 1 ] || [ "$marks_physics" -gt 99 ]; then
  echo "$rollno:$name:$marks_hindi:$marks_maths:$marks_physics - marks out of range" >> $logfile
else
  # Calculate total, percentage, and grade
  total=$((marks_hindi + marks_maths + marks_physics))
  percentage=$((total / 3))
  if [ "$percentage" -ge 90 ]; then
    grade="A"
  elif [ "$percentage" -ge 75 ]; then
    grade="B"
  elif [ "$percentage" -ge 50 ]; then
    grade="C"
  else
    grade="D"
  fi
  echo "Total: $total"
  echo "Percentage: $percentage"
  echo "Grade: $grade"

  echo "$rollno:$name:$marks_hindi:$marks_maths:$marks_physics" >> student
fi

OUTPUT

[root@hostname01 ~]# ./program11.sh
Enter Roll No:
101
grep: student: No such file or directory
Enter Name:
sumedh
Enter Marks in Hindi:
90
Enter Marks in Maths:
92
Enter Marks in Physics:
98
Total: 280
Percentage: 93
Grade: A

